{"version":3,"sources":["Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","util/Spotify.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","searchBarTerm","search","bind","assertThisInitialized","handleTermChange","onSearch","event","target","value","setState","react_default","a","createElement","className","onChange","placeholder","onClick","React","Component","Track","addTrack","removeTrack","action","isRemoval","actionFunction","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","searchResults","map","currentTrack","push","Components_Track_Track","key","id","i","SearchResults","Components_TrackList_TrackList","Playlist","handleNameChange","onNameChange","playlistName","playlistTracks","onSave","user_access_token","expirationTime","Spotify","getAccessToken","url","document","location","href","match","window","setTimeout","history","pushState","concat","_search","asyncToGenerator","regenerator_default","mark","_callee","term","searchResult","response","responseJson","wrap","_context","prev","next","fetch","headers","Authorization","sent","ok","json","console","log","items","length","artists","uri","abrupt","Error","t0","stop","_x","apply","arguments","savePlaylist","_savePlaylist","_callee6","trackURIs","userId","playlistID","_context6","Content-Type","then","_ref","_callee5","_context5","method","body","JSON","stringify","_ref2","_callee2","_responseJson","_context2","_x5","_ref3","_callee3","_context3","uris","_x6","_ref4","_callee4","resJson","_context4","_x7","_x4","_x2","_x3","App","updatePlaylistName","filter","current","indexOf","flat","Components_SearchBar_SearchBar","Components_SearchResults_SearchResults","Components_Playlist_Playlist","Boolean","hostname","ReactDOM","render","Components_App_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.718525d2.chunk.js","sourcesContent":["import React from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchBarTerm: '',\n    };\n    this.search = this.search.bind(this);\n    this.handleTermChange = this.handleTermChange.bind(this);\n  }\n\n  search() {\n    this.props.onSearch(this.state.searchBarTerm);\n  }\n\n  handleTermChange(event) {\n    const searchBarTerm = event.target.value;\n    this.setState({ searchBarTerm });\n  }\n\n  render() {\n    return (\n      <div className=\"SearchBar\">\n        <input onChange={this.handleTermChange} placeholder=\"Enter A Song, Album, or Artist\" />\n        <a onClick={this.search}>SEARCH</a>\n      </div>\n    );\n  }\n}\n\nexport default SearchBar;\n","import React from 'react';\nimport './Track.css';\n\nclass Track extends React.Component {\n  constructor(props) {\n    super(props);\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n  }\n\n  renderAction() {\n    const action = this.props.isRemoval ? '-' : '+';\n    const actionFunction = this.props.isRemoval ? this.removeTrack : this.addTrack;\n    return <a className=\"Track-action\" onClick={actionFunction}>{action}</a>;\n  }\n\n  addTrack() {\n    this.props.onAdd(this.props.track);\n  }\n\n  removeTrack() {\n    this.props.onRemove(this.props.track);\n  }\n\n  render() {\n    return (\n      <div className=\"Track\">\n        <div className=\"Track-information\">\n          <h3>{this.props.track.name}</h3>\n          <p>{this.props.track.artist} | {this.props.track.album}</p>\n        </div>\n        {this.renderAction()}\n      </div>\n    );\n  }\n};\n\nexport default Track;\n","import React from 'react';\nimport Track from '../Track/Track';\nimport './TrackList.css';\n\nclass TrackList extends React.Component {\n\n  render() {\n    const tracks = [];\n    if (this.props.searchResults) {\n      this.props.searchResults.map((currentTrack) => {\n        tracks.push(<Track\n                track={currentTrack}\n                onAdd={this.props.onAdd}\n                key={currentTrack.id}\n                name={currentTrack.name}\n                album={currentTrack.album}\n                artist={currentTrack.artist}\n                onRemove={this.props.onRemove}\n                isRemoval={this.props.isRemoval} />\n        );\n      });\n    }\n\n    return (\n      <div className=\"TrackList\">\n        {tracks.map((track, i) => <div key={track.key + i}>{track}</div>)}\n      </div>\n    );\n  }\n}\n\nexport default TrackList;\n","import React from 'react';\nimport TrackList from '../TrackList/TrackList';\nimport './SearchResults.css';\n\nclass SearchResults extends React.Component {\n  render() {\n    return (\n      <div className=\"SearchResults\">\n        <h2>Results</h2>\n        <TrackList onAdd={this.props.onAdd} searchResults={this.props.searchResults} isRemoval={false} />\n      </div>\n    );\n  }\n}\n\nexport default SearchResults;\n","import React from 'react';\nimport './Playlist.css';\nimport TrackList from '../TrackList/TrackList'\n\nclass Playlist extends React.Component {\nconstructor(props) {\n  super(props);\n  this.handleNameChange = this.handleNameChange.bind(this);\n}\n\n// is default value as it should be?\n// should update searchResults to playlistTracks in tracklist?\n\nhandleNameChange(event) {\n  this.props.onNameChange(event.target.value);\n}\n\n  render() {\n    return (\n      <div className=\"Playlist\">\n        <input onChange={this.handleNameChange} value={this.props.playlistName}/>\n        <TrackList searchResults={this.props.playlistTracks} onRemove={this.props.onRemove} isRemoval={true}/>\n        <a onClick={this.props.onSave} className=\"Playlist-save\">SAVE TO SPOTIFY</a>\n      </div>\n    );\n  }\n}\n\nexport default Playlist;\n","let user_access_token = '';\nlet expirationTime = '';\nconst client_id = 'd04611563d9e41f481bdcc0d7449f260';\nconst redirectURI = 'http://localhost:3000/';\n// const redirectURI = 'https://omrijam.surge.sh/';\n\nconst Spotify = {\n\n  getAccessToken() {\n    if (user_access_token) {\n      return user_access_token;\n    }\n    const url = document.location.href;\n    user_access_token = url.match(/access_token=([^&]+)/) ? url.match(/access_token=([^&]+)/)[1] : '';\n    expirationTime = url.match(/expires_in=([^&]+)/) ? url.match(/expires_in=([^&]+)/)[1] : '';\n    if (user_access_token && expirationTime) {\n      window.setTimeout(() => user_access_token = '', expirationTime * 100000);\n      window.history.pushState('Access Token', null, '/');\n    } else {\n      window.location.href = `https://accounts.spotify.com/authorize?client_id=${client_id}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n    }\n    return user_access_token;\n  },\n\n  async search(term) {\n    try {\n      this.getAccessToken();\n      const searchResult = [];\n      const response = await fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, { headers: { Authorization: `Bearer ${user_access_token}` } });\n      if (response.ok) {\n        const responseJson = await response.json();\n        console.log(responseJson);\n        if (responseJson.tracks.items.length > 0) {\n          responseJson.tracks.items.map((track) => {\n            searchResult.push({\n              id: track.id,\n              name: track.name,\n              artist: track.artists[0].name,\n              album: track.album.name,\n              uri: track.uri,\n            });\n          });\n        }\n        return searchResult;\n      }\n      throw new Error('Could not search spotify');\n    } catch (error) {\n      console.log(error);\n    }\n  },\n\n  async savePlaylist(playlistName, trackURIs) {\n    if (!playlistName || !trackURIs) {\n      return;\n    }\n    const accessToken = user_access_token;\n    const headers = {\n      Authorization: `Bearer ${accessToken}`,\n      'Content-Type': 'application/json',\n    };\n    try {\n      let userId = '';\n      let playlistID = '';\n      await fetch('https://api.spotify.com/v1/me', { headers }).then(async (response) => {\n        if (response.ok) {\n          const responseJson = await response.json();\n          userId = responseJson.id;\n          await fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n            headers,\n            method: 'POST',\n            body: JSON.stringify({\n\t\t\t\t\t\t            name: playlistName,\n            }),\n          }).then(async (response) => {\n            if (response.ok) {\n              const responseJson = await response.json();\n              playlistID = responseJson.id;\n              return playlistID;\n            }\n          }).then(async playlistID => await fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistID}/tracks`,\n            {\n              headers,\n              method: 'POST',\n              body: JSON.stringify({ uris: trackURIs }),\n            }))\n            .then(async (response) => {\n              if (response.ok) {\n                const resJson = await response.json();\n                console.log(resJson);\n              }\n            });\n        }\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  },\n};\nexport default Spotify;\n","import React, { Component } from 'react';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      playlistName: 'New playlist',\n      playlistTracks: [{\n        album: \"L'amour En France\",\n        artist: 'Alain Chamfort',\n        id: '5aFLrbiRTEaZuueEHNnhIZ',\n        name: 'Madona',\n        uri: 'spotify:track:5aFLrbiRTEaZuueEHNnhIZ',\n      }],\n      searchResults: [\n        {\n          album: 'Recovery',\n          artist: 'Eminem',\n          id: '15JINEqzVMv3SvJTAXAKED',\n          name: 'Love The Way You Lie',\n          uri: 'spotify:track:15JINEqzVMv3SvJTAXAKED',\n        },\n        {\n          album: 'Curtain Call',\n          artist: 'Eminem',\n          id: '1dWimOlV5KUHDerWZVDv5l',\n          name: 'My Name Is',\n          uri: 'spotify:track:1dWimOlV5KUHDerWZVDv5l',\n        }],\n    };\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    const trackArray = this.state.playlistTracks.filter(current => current.id === track.id);\n    if (!trackArray.length) {\n      const { playlistTracks } = this.state;\n      playlistTracks.push(track);\n      this.setState({ playlistTracks });\n    }\n  }\n\n  removeTrack(track) {\n    const trackArray = this.state.playlistTracks.filter(current => current.id === track.id);\n    if (trackArray.length) {\n      const { playlistTracks } = this.state;\n      delete playlistTracks[this.state.playlistTracks.indexOf(track)];\n      this.setState({ playlistTracks });\n    }\n  }\n\n  updatePlaylistName(playlistName) {\n    this.setState({ playlistName });\n  }\n\n  async savePlaylist() {\n    const trackURIs = this.state.playlistTracks.map(track => track.uri).flat();\n    await Spotify.savePlaylist(this.state.playlistName, trackURIs);\n    // TODO add then?\n    this.updatePlaylistName('New Playlist');\n    this.setState({ playlistTracks: [] });\n  }\n\n  async search(term) {\n    const searchResults = await Spotify.search(term);\n    this.setState({ searchResults });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n          <SearchResults onAdd={this.addTrack} searchResults={this.state.searchResults} />\n          <Playlist\n              onSave={this.savePlaylist}\n              onNameChange={this.updatePlaylistName}\n              onRemove={this.removeTrack}\n              playlistTracks={this.state.playlistTracks}\n              playlistName={this.state.playlistName} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}