{"ast":null,"code":"import _regeneratorRuntime from \"/Users/omrigotlieb/Desktop/projects/CA/CodeAcademy/jamming/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/omrigotlieb/Desktop/projects/CA/CodeAcademy/jamming/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar user_access_token = '';\nvar expirationTime = '';\nvar client_id = 'd04611563d9e41f481bdcc0d7449f260';\nvar redirectURI = 'http://localhost:3000/'; //const redirectURI = 'https://omrijam.surge.sh/';\n\nvar Spotify = {\n  getAccessToken: function getAccessToken() {\n    if (user_access_token) {\n      return user_access_token;\n    }\n\n    var url = document.location.href;\n    user_access_token = url.match(/access_token=([^&]+)/) ? url.match(/access_token=([^&]+)/)[1] : '';\n    expirationTime = url.match(/expires_in=([^&]+)/) ? url.match(/expires_in=([^&]+)/)[1] : '';\n\n    if (user_access_token && expirationTime) {\n      window.setTimeout(function () {\n        return user_access_token = '';\n      }, expirationTime * 100000);\n      window.history.pushState('Access Token', null, '/');\n    } else {\n      window.location.href = \"https://accounts.spotify.com/authorize?client_id=\".concat(client_id, \"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirectURI);\n    }\n\n    return user_access_token;\n  },\n  search: function () {\n    var _search = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(term) {\n      var searchResult, response, responseJson;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              this.getAccessToken();\n              searchResult = [];\n              _context.next = 5;\n              return fetch(\"https://api.spotify.com/v1/search?type=track&q=\".concat(term), {\n                headers: {\n                  'Authorization': \"Bearer \".concat(user_access_token)\n                }\n              });\n\n            case 5:\n              response = _context.sent;\n\n              if (!response.ok) {\n                _context.next = 15;\n                break;\n              }\n\n              _context.next = 9;\n              return response.json();\n\n            case 9:\n              responseJson = _context.sent;\n              console.log(responseJson);\n\n              if (responseJson.tracks.items.length > 0) {\n                responseJson.tracks.items.map(function (track) {\n                  searchResult.push({\n                    id: track.id,\n                    name: track.name,\n                    artist: track.artists[0].name,\n                    album: track.album.name,\n                    uri: track.uri\n                  });\n                });\n              }\n\n              return _context.abrupt(\"return\", searchResult);\n\n            case 15:\n              throw new Error('Could not search spotify');\n\n            case 16:\n              _context.next = 21;\n              break;\n\n            case 18:\n              _context.prev = 18;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 21:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[0, 18]]);\n    }));\n\n    function search(_x) {\n      return _search.apply(this, arguments);\n    }\n\n    return search;\n  }(),\n  savePlaylist: function () {\n    var _savePlaylist = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee6(playlistName, trackURIs) {\n      var accessToken, headers, userId, playlistID;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              if (!(!playlistName || !trackURIs)) {\n                _context6.next = 2;\n                break;\n              }\n\n              return _context6.abrupt(\"return\");\n\n            case 2:\n              accessToken = user_access_token;\n              headers = {\n                'Authorization': \"Bearer \".concat(accessToken),\n                'Content-Type': 'application/json'\n              };\n              _context6.prev = 4;\n              userId = '';\n              playlistID = '';\n              _context6.next = 9;\n              return fetch('https://api.spotify.com/v1/me', {\n                headers: headers\n              }).then(\n              /*#__PURE__*/\n              function () {\n                var _ref = _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee5(response) {\n                  var responseJson;\n                  return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n                    while (1) {\n                      switch (_context5.prev = _context5.next) {\n                        case 0:\n                          if (!response.ok) {\n                            _context5.next = 7;\n                            break;\n                          }\n\n                          _context5.next = 3;\n                          return response.json();\n\n                        case 3:\n                          responseJson = _context5.sent;\n                          userId = responseJson.id;\n                          _context5.next = 7;\n                          return fetch(\"https://api.spotify.com/v1/users/\".concat(userId, \"/playlists\"), {\n                            headers: headers,\n                            method: 'POST',\n                            body: JSON.stringify({\n                              name: playlistName\n                            })\n                          }).then(\n                          /*#__PURE__*/\n                          function () {\n                            var _ref2 = _asyncToGenerator(\n                            /*#__PURE__*/\n                            _regeneratorRuntime.mark(function _callee2(response) {\n                              var _responseJson;\n\n                              return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                                while (1) {\n                                  switch (_context2.prev = _context2.next) {\n                                    case 0:\n                                      if (!response.ok) {\n                                        _context2.next = 6;\n                                        break;\n                                      }\n\n                                      _context2.next = 3;\n                                      return response.json();\n\n                                    case 3:\n                                      _responseJson = _context2.sent;\n                                      playlistID = _responseJson.id;\n                                      return _context2.abrupt(\"return\", playlistID);\n\n                                    case 6:\n                                    case \"end\":\n                                      return _context2.stop();\n                                  }\n                                }\n                              }, _callee2);\n                            }));\n\n                            return function (_x5) {\n                              return _ref2.apply(this, arguments);\n                            };\n                          }()).then(\n                          /*#__PURE__*/\n                          function () {\n                            var _ref3 = _asyncToGenerator(\n                            /*#__PURE__*/\n                            _regeneratorRuntime.mark(function _callee3(playlistID) {\n                              return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                                while (1) {\n                                  switch (_context3.prev = _context3.next) {\n                                    case 0:\n                                      _context3.next = 2;\n                                      return fetch(\"https://api.spotify.com/v1/users/\".concat(userId, \"/playlists/\").concat(playlistID, \"/tracks\"), {\n                                        headers: headers,\n                                        method: 'POST',\n                                        body: JSON.stringify({\n                                          uris: trackURIs\n                                        })\n                                      });\n\n                                    case 2:\n                                      return _context3.abrupt(\"return\", _context3.sent);\n\n                                    case 3:\n                                    case \"end\":\n                                      return _context3.stop();\n                                  }\n                                }\n                              }, _callee3);\n                            }));\n\n                            return function (_x6) {\n                              return _ref3.apply(this, arguments);\n                            };\n                          }()).then(\n                          /*#__PURE__*/\n                          function () {\n                            var _ref4 = _asyncToGenerator(\n                            /*#__PURE__*/\n                            _regeneratorRuntime.mark(function _callee4(response) {\n                              var resJson;\n                              return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                                while (1) {\n                                  switch (_context4.prev = _context4.next) {\n                                    case 0:\n                                      if (!response.ok) {\n                                        _context4.next = 5;\n                                        break;\n                                      }\n\n                                      _context4.next = 3;\n                                      return response.json();\n\n                                    case 3:\n                                      resJson = _context4.sent;\n                                      console.log(resJson);\n\n                                    case 5:\n                                    case \"end\":\n                                      return _context4.stop();\n                                  }\n                                }\n                              }, _callee4);\n                            }));\n\n                            return function (_x7) {\n                              return _ref4.apply(this, arguments);\n                            };\n                          }());\n\n                        case 7:\n                        case \"end\":\n                          return _context5.stop();\n                      }\n                    }\n                  }, _callee5);\n                }));\n\n                return function (_x4) {\n                  return _ref.apply(this, arguments);\n                };\n              }());\n\n            case 9:\n              _context6.next = 14;\n              break;\n\n            case 11:\n              _context6.prev = 11;\n              _context6.t0 = _context6[\"catch\"](4);\n              console.log(_context6.t0);\n\n            case 14:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, null, [[4, 11]]);\n    }));\n\n    function savePlaylist(_x2, _x3) {\n      return _savePlaylist.apply(this, arguments);\n    }\n\n    return savePlaylist;\n  }()\n};\nexport default Spotify;","map":{"version":3,"sources":["/Users/omrigotlieb/Desktop/projects/CA/CodeAcademy/jamming/src/util/Spotify.js"],"names":["user_access_token","expirationTime","client_id","redirectURI","Spotify","getAccessToken","url","document","location","href","match","window","setTimeout","history","pushState","search","term","searchResult","fetch","headers","response","ok","json","responseJson","console","log","tracks","items","length","map","track","push","id","name","artist","artists","album","uri","Error","savePlaylist","playlistName","trackURIs","accessToken","userId","playlistID","then","method","body","JSON","stringify","uris","resJson"],"mappings":"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","sourcesContent":["let user_access_token = '';\nlet expirationTime = '';\nconst client_id = 'd04611563d9e41f481bdcc0d7449f260';\nconst redirectURI = 'http://localhost:3000/';\n//const redirectURI = 'https://omrijam.surge.sh/';\n\nconst Spotify = {\n\n  getAccessToken(){\n    if(user_access_token) {\n      return user_access_token;\n    }\n    const url = document.location.href;\n\n      user_access_token = url.match(/access_token=([^&]+)/)? url.match(/access_token=([^&]+)/)[1] : '';\n      expirationTime = url.match(/expires_in=([^&]+)/)? url.match(/expires_in=([^&]+)/)[1]: '';\n      if(user_access_token && expirationTime) {\n        window.setTimeout(() => user_access_token = '', expirationTime * 100000);\n        window.history.pushState('Access Token', null, '/');\n      } else {\n          window.location.href = `https://accounts.spotify.com/authorize?client_id=${client_id}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n      }\n    return user_access_token;\n  },\n\n   async search(term){\n      try {\n        this.getAccessToken();\n        let searchResult = [];\n        const response = await fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {headers: {\n         'Authorization': `Bearer ${user_access_token}`}});\n         if(response.ok) {\n           const responseJson = await response.json();\n           console.log(responseJson);\n           if (responseJson.tracks.items.length > 0) {\n             responseJson.tracks.items.map(track => {\n               searchResult.push({\n                 id: track.id,\n                 name: track.name,\n                 artist: track.artists[0].name,\n                 album: track.album.name,\n                 uri: track.uri\n                });\n              });\n           }\n           return searchResult;\n         } else {\n           throw new Error ('Could not search spotify');\n         }\n      } catch (error) {\n        console.log(error);\n      }\n    },\n\n   async savePlaylist(playlistName, trackURIs){\n      if(!playlistName || !trackURIs) {\n        return;\n      }\n      let accessToken = user_access_token;\n      let headers = {\n         'Authorization': `Bearer ${accessToken}`,\n         'Content-Type': 'application/json'\n       };\n       try {\n         let userId = '';\n         let playlistID = '';\n         await fetch('https://api.spotify.com/v1/me', {headers: headers}).then(async (response) => {\n           if(response.ok) {\n             const responseJson = await response.json();\n              userId = responseJson.id;\n              await fetch(`https://api.spotify.com/v1/users/${userId}/playlists`,{\n                headers: headers,\n                method: 'POST',\n                body: JSON.stringify({\n\t\t\t\t\t\t            name: playlistName\n                      })\n              }).then(async (response) => {\n                if(response.ok) {\n                  const responseJson = await response.json();\n                   playlistID = responseJson.id;\n                   return playlistID;\n                }\n              }).then(async (playlistID) => {\n                return await fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistID}/tracks`,\n                  { headers: headers,\n                    method: 'POST',\n                    body: JSON.stringify({uris: trackURIs})\n                  })})\n                .then(async (response) => {\n                if(response.ok) {\n                  const resJson = await response.json();\n                  console.log(resJson)\n                }\n              })\n           }\n         });\n       } catch (error) {\n         console.log(error)\n       }\n    }\n};\nexport default Spotify;\n"]},"metadata":{},"sourceType":"module"}